// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txn.proto

#ifndef PROTOBUF_txn_2eproto__INCLUDED
#define PROTOBUF_txn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_txn_2eproto();
void protobuf_AssignDesc_txn_2eproto();
void protobuf_ShutdownFile_txn_2eproto();

class TxnProto;

enum TxnProto_IsolationLevel {
  TxnProto_IsolationLevel_SERIALIZABLE = 0,
  TxnProto_IsolationLevel_SNAPSHOT = 1,
  TxnProto_IsolationLevel_READ_COMMITTED = 2,
  TxnProto_IsolationLevel_READ_UNCOMMITTED = 3
};
bool TxnProto_IsolationLevel_IsValid(int value);
const TxnProto_IsolationLevel TxnProto_IsolationLevel_IsolationLevel_MIN = TxnProto_IsolationLevel_SERIALIZABLE;
const TxnProto_IsolationLevel TxnProto_IsolationLevel_IsolationLevel_MAX = TxnProto_IsolationLevel_READ_UNCOMMITTED;
const int TxnProto_IsolationLevel_IsolationLevel_ARRAYSIZE = TxnProto_IsolationLevel_IsolationLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnProto_IsolationLevel_descriptor();
inline const ::std::string& TxnProto_IsolationLevel_Name(TxnProto_IsolationLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnProto_IsolationLevel_descriptor(), value);
}
inline bool TxnProto_IsolationLevel_Parse(
    const ::std::string& name, TxnProto_IsolationLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnProto_IsolationLevel>(
    TxnProto_IsolationLevel_descriptor(), name, value);
}
enum TxnProto_Status {
  TxnProto_Status_NEW = 0,
  TxnProto_Status_ACTIVE = 1,
  TxnProto_Status_READY = 2,
  TxnProto_Status_NETWORK = 3,
  TxnProto_Status_BLOCKED = 4,
  TxnProto_Status_ABORTED = 5,
  TxnProto_Status_COMMITTED = 6,
  TxnProto_Status_TWOPC = 7
};
bool TxnProto_Status_IsValid(int value);
const TxnProto_Status TxnProto_Status_Status_MIN = TxnProto_Status_NEW;
const TxnProto_Status TxnProto_Status_Status_MAX = TxnProto_Status_TWOPC;
const int TxnProto_Status_Status_ARRAYSIZE = TxnProto_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnProto_Status_descriptor();
inline const ::std::string& TxnProto_Status_Name(TxnProto_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnProto_Status_descriptor(), value);
}
inline bool TxnProto_Status_Parse(
    const ::std::string& name, TxnProto_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnProto_Status>(
    TxnProto_Status_descriptor(), name, value);
}
// ===================================================================

class TxnProto : public ::google::protobuf::Message {
 public:
  TxnProto();
  virtual ~TxnProto();
  
  TxnProto(const TxnProto& from);
  
  inline TxnProto& operator=(const TxnProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnProto& default_instance();
  
  void Swap(TxnProto* other);
  
  // implements Message ----------------------------------------------
  
  TxnProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxnProto& from);
  void MergeFrom(const TxnProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TxnProto_IsolationLevel IsolationLevel;
  static const IsolationLevel SERIALIZABLE = TxnProto_IsolationLevel_SERIALIZABLE;
  static const IsolationLevel SNAPSHOT = TxnProto_IsolationLevel_SNAPSHOT;
  static const IsolationLevel READ_COMMITTED = TxnProto_IsolationLevel_READ_COMMITTED;
  static const IsolationLevel READ_UNCOMMITTED = TxnProto_IsolationLevel_READ_UNCOMMITTED;
  static inline bool IsolationLevel_IsValid(int value) {
    return TxnProto_IsolationLevel_IsValid(value);
  }
  static const IsolationLevel IsolationLevel_MIN =
    TxnProto_IsolationLevel_IsolationLevel_MIN;
  static const IsolationLevel IsolationLevel_MAX =
    TxnProto_IsolationLevel_IsolationLevel_MAX;
  static const int IsolationLevel_ARRAYSIZE =
    TxnProto_IsolationLevel_IsolationLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IsolationLevel_descriptor() {
    return TxnProto_IsolationLevel_descriptor();
  }
  static inline const ::std::string& IsolationLevel_Name(IsolationLevel value) {
    return TxnProto_IsolationLevel_Name(value);
  }
  static inline bool IsolationLevel_Parse(const ::std::string& name,
      IsolationLevel* value) {
    return TxnProto_IsolationLevel_Parse(name, value);
  }
  
  typedef TxnProto_Status Status;
  static const Status NEW = TxnProto_Status_NEW;
  static const Status ACTIVE = TxnProto_Status_ACTIVE;
  static const Status READY = TxnProto_Status_READY;
  static const Status NETWORK = TxnProto_Status_NETWORK;
  static const Status BLOCKED = TxnProto_Status_BLOCKED;
  static const Status ABORTED = TxnProto_Status_ABORTED;
  static const Status COMMITTED = TxnProto_Status_COMMITTED;
  static const Status TWOPC = TxnProto_Status_TWOPC;
  static inline bool Status_IsValid(int value) {
    return TxnProto_Status_IsValid(value);
  }
  static const Status Status_MIN =
    TxnProto_Status_Status_MIN;
  static const Status Status_MAX =
    TxnProto_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    TxnProto_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return TxnProto_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return TxnProto_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return TxnProto_Status_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int64 txn_id = 1;
  inline bool has_txn_id() const;
  inline void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  inline ::google::protobuf::int64 txn_id() const;
  inline void set_txn_id(::google::protobuf::int64 value);
  
  // optional int32 txn_type = 10;
  inline bool has_txn_type() const;
  inline void clear_txn_type();
  static const int kTxnTypeFieldNumber = 10;
  inline ::google::protobuf::int32 txn_type() const;
  inline void set_txn_type(::google::protobuf::int32 value);
  
  // optional .TxnProto.IsolationLevel isolation_level = 11;
  inline bool has_isolation_level() const;
  inline void clear_isolation_level();
  static const int kIsolationLevelFieldNumber = 11;
  inline ::TxnProto_IsolationLevel isolation_level() const;
  inline void set_isolation_level(::TxnProto_IsolationLevel value);
  
  // optional bool multipartition = 12;
  inline bool has_multipartition() const;
  inline void clear_multipartition();
  static const int kMultipartitionFieldNumber = 12;
  inline bool multipartition() const;
  inline void set_multipartition(bool value);
  
  // repeated uint64 read_set = 20;
  inline int read_set_size() const;
  inline void clear_read_set();
  static const int kReadSetFieldNumber = 20;
  inline ::google::protobuf::uint64 read_set(int index) const;
  inline void set_read_set(int index, ::google::protobuf::uint64 value);
  inline void add_read_set(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      read_set() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_read_set();
  
  // repeated uint64 write_set = 21;
  inline int write_set_size() const;
  inline void clear_write_set();
  static const int kWriteSetFieldNumber = 21;
  inline ::google::protobuf::uint64 write_set(int index) const;
  inline void set_write_set(int index, ::google::protobuf::uint64 value);
  inline void add_write_set(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      write_set() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_write_set();
  
  // optional bytes arg = 22;
  inline bool has_arg() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 22;
  inline const ::std::string& arg() const;
  inline void set_arg(const ::std::string& value);
  inline void set_arg(const char* value);
  inline void set_arg(const void* value, size_t size);
  inline ::std::string* mutable_arg();
  
  // optional .TxnProto.Status status = 30;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 30;
  inline ::TxnProto_Status status() const;
  inline void set_status(::TxnProto_Status value);
  
  // @@protoc_insertion_point(class_scope:TxnProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 txn_id_;
  ::google::protobuf::int32 txn_type_;
  int isolation_level_;
  bool multipartition_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > read_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > write_set_;
  ::std::string* arg_;
  static const ::std::string _default_arg_;
  int status_;
  friend void  protobuf_AddDesc_txn_2eproto();
  friend void protobuf_AssignDesc_txn_2eproto();
  friend void protobuf_ShutdownFile_txn_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TxnProto* default_instance_;
};
// ===================================================================


// ===================================================================

// TxnProto

// required int64 txn_id = 1;
inline bool TxnProto::has_txn_id() const {
  return _has_bit(0);
}
inline void TxnProto::clear_txn_id() {
  txn_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 TxnProto::txn_id() const {
  return txn_id_;
}
inline void TxnProto::set_txn_id(::google::protobuf::int64 value) {
  _set_bit(0);
  txn_id_ = value;
}

// optional int32 txn_type = 10;
inline bool TxnProto::has_txn_type() const {
  return _has_bit(1);
}
inline void TxnProto::clear_txn_type() {
  txn_type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 TxnProto::txn_type() const {
  return txn_type_;
}
inline void TxnProto::set_txn_type(::google::protobuf::int32 value) {
  _set_bit(1);
  txn_type_ = value;
}

// optional .TxnProto.IsolationLevel isolation_level = 11;
inline bool TxnProto::has_isolation_level() const {
  return _has_bit(2);
}
inline void TxnProto::clear_isolation_level() {
  isolation_level_ = 0;
  _clear_bit(2);
}
inline ::TxnProto_IsolationLevel TxnProto::isolation_level() const {
  return static_cast< ::TxnProto_IsolationLevel >(isolation_level_);
}
inline void TxnProto::set_isolation_level(::TxnProto_IsolationLevel value) {
  GOOGLE_DCHECK(::TxnProto_IsolationLevel_IsValid(value));
  _set_bit(2);
  isolation_level_ = value;
}

// optional bool multipartition = 12;
inline bool TxnProto::has_multipartition() const {
  return _has_bit(3);
}
inline void TxnProto::clear_multipartition() {
  multipartition_ = false;
  _clear_bit(3);
}
inline bool TxnProto::multipartition() const {
  return multipartition_;
}
inline void TxnProto::set_multipartition(bool value) {
  _set_bit(3);
  multipartition_ = value;
}

// repeated uint64 read_set = 20;
inline int TxnProto::read_set_size() const {
  return read_set_.size();
}
inline void TxnProto::clear_read_set() {
  read_set_.Clear();
}
inline ::google::protobuf::uint64 TxnProto::read_set(int index) const {
  return read_set_.Get(index);
}
inline void TxnProto::set_read_set(int index, ::google::protobuf::uint64 value) {
  read_set_.Set(index, value);
}
inline void TxnProto::add_read_set(::google::protobuf::uint64 value) {
  read_set_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TxnProto::read_set() const {
  return read_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TxnProto::mutable_read_set() {
  return &read_set_;
}

// repeated uint64 write_set = 21;
inline int TxnProto::write_set_size() const {
  return write_set_.size();
}
inline void TxnProto::clear_write_set() {
  write_set_.Clear();
}
inline ::google::protobuf::uint64 TxnProto::write_set(int index) const {
  return write_set_.Get(index);
}
inline void TxnProto::set_write_set(int index, ::google::protobuf::uint64 value) {
  write_set_.Set(index, value);
}
inline void TxnProto::add_write_set(::google::protobuf::uint64 value) {
  write_set_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TxnProto::write_set() const {
  return write_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TxnProto::mutable_write_set() {
  return &write_set_;
}

// optional bytes arg = 22;
inline bool TxnProto::has_arg() const {
  return _has_bit(6);
}
inline void TxnProto::clear_arg() {
  if (arg_ != &_default_arg_) {
    arg_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& TxnProto::arg() const {
  return *arg_;
}
inline void TxnProto::set_arg(const ::std::string& value) {
  _set_bit(6);
  if (arg_ == &_default_arg_) {
    arg_ = new ::std::string;
  }
  arg_->assign(value);
}
inline void TxnProto::set_arg(const char* value) {
  _set_bit(6);
  if (arg_ == &_default_arg_) {
    arg_ = new ::std::string;
  }
  arg_->assign(value);
}
inline void TxnProto::set_arg(const void* value, size_t size) {
  _set_bit(6);
  if (arg_ == &_default_arg_) {
    arg_ = new ::std::string;
  }
  arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxnProto::mutable_arg() {
  _set_bit(6);
  if (arg_ == &_default_arg_) {
    arg_ = new ::std::string;
  }
  return arg_;
}

// optional .TxnProto.Status status = 30;
inline bool TxnProto::has_status() const {
  return _has_bit(7);
}
inline void TxnProto::clear_status() {
  status_ = 0;
  _clear_bit(7);
}
inline ::TxnProto_Status TxnProto::status() const {
  return static_cast< ::TxnProto_Status >(status_);
}
inline void TxnProto::set_status(::TxnProto_Status value) {
  GOOGLE_DCHECK(::TxnProto_Status_IsValid(value));
  _set_bit(7);
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TxnProto_IsolationLevel>() {
  return ::TxnProto_IsolationLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TxnProto_Status>() {
  return ::TxnProto_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_txn_2eproto__INCLUDED
