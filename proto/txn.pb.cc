// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "txn.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TxnProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxnProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_txn_2eproto() {
  protobuf_AddDesc_txn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "txn.proto");
  GOOGLE_CHECK(file != NULL);
  TxnProto_descriptor_ = file->message_type(0);
  static const int TxnProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, txn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, txn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, isolation_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, multipartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, rset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, wset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, args_),
  };
  TxnProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxnProto_descriptor_,
      TxnProto::default_instance_,
      TxnProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxnProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_txn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxnProto_descriptor_, &TxnProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_txn_2eproto() {
  delete TxnProto::default_instance_;
  delete TxnProto_reflection_;
}

void protobuf_AddDesc_txn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttxn.proto\"\207\001\n\010TxnProto\022\016\n\006txn_id\030\001 \002(\003"
    "\022\020\n\010txn_type\030\n \001(\005\022\027\n\017isolation_level\030\013 "
    "\001(\005\022\026\n\016multipartition\030\024 \001(\010\022\014\n\004rset\030\036 \003("
    "\003\022\014\n\004wset\030\037 \003(\003\022\014\n\004args\030  \003(\003", 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "txn.proto", &protobuf_RegisterTypes);
  TxnProto::default_instance_ = new TxnProto();
  TxnProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_txn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_txn_2eproto {
  StaticDescriptorInitializer_txn_2eproto() {
    protobuf_AddDesc_txn_2eproto();
  }
} static_descriptor_initializer_txn_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TxnProto::kTxnIdFieldNumber;
const int TxnProto::kTxnTypeFieldNumber;
const int TxnProto::kIsolationLevelFieldNumber;
const int TxnProto::kMultipartitionFieldNumber;
const int TxnProto::kRsetFieldNumber;
const int TxnProto::kWsetFieldNumber;
const int TxnProto::kArgsFieldNumber;
#endif  // !_MSC_VER

TxnProto::TxnProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxnProto::InitAsDefaultInstance() {
}

TxnProto::TxnProto(const TxnProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxnProto::SharedCtor() {
  _cached_size_ = 0;
  txn_id_ = GOOGLE_LONGLONG(0);
  txn_type_ = 0;
  isolation_level_ = 0;
  multipartition_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnProto::~TxnProto() {
  SharedDtor();
}

void TxnProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TxnProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxnProto_descriptor_;
}

const TxnProto& TxnProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_txn_2eproto();  return *default_instance_;
}

TxnProto* TxnProto::default_instance_ = NULL;

TxnProto* TxnProto::New() const {
  return new TxnProto;
}

void TxnProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    txn_id_ = GOOGLE_LONGLONG(0);
    txn_type_ = 0;
    isolation_level_ = 0;
    multipartition_ = false;
  }
  rset_.Clear();
  wset_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxnProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 txn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &txn_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_txn_type;
        break;
      }
      
      // optional int32 txn_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txn_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txn_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isolation_level;
        break;
      }
      
      // optional int32 isolation_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isolation_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isolation_level_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_multipartition;
        break;
      }
      
      // optional bool multipartition = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multipartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multipartition_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rset;
        break;
      }
      
      // repeated int64 rset = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 240, input, this->mutable_rset())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_rset())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_rset;
        if (input->ExpectTag(248)) goto parse_wset;
        break;
      }
      
      // repeated int64 wset = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 248, input, this->mutable_wset())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_wset())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_wset;
        if (input->ExpectTag(256)) goto parse_args;
        break;
      }
      
      // repeated int64 args = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 256, input, this->mutable_args())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_args())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxnProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 txn_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->txn_id(), output);
  }
  
  // optional int32 txn_type = 10;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->txn_type(), output);
  }
  
  // optional int32 isolation_level = 11;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isolation_level(), output);
  }
  
  // optional bool multipartition = 20;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->multipartition(), output);
  }
  
  // repeated int64 rset = 30;
  for (int i = 0; i < this->rset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      30, this->rset(i), output);
  }
  
  // repeated int64 wset = 31;
  for (int i = 0; i < this->wset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      31, this->wset(i), output);
  }
  
  // repeated int64 args = 32;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      32, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxnProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 txn_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->txn_id(), target);
  }
  
  // optional int32 txn_type = 10;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->txn_type(), target);
  }
  
  // optional int32 isolation_level = 11;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isolation_level(), target);
  }
  
  // optional bool multipartition = 20;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->multipartition(), target);
  }
  
  // repeated int64 rset = 30;
  for (int i = 0; i < this->rset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(30, this->rset(i), target);
  }
  
  // repeated int64 wset = 31;
  for (int i = 0; i < this->wset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(31, this->wset(i), target);
  }
  
  // repeated int64 args = 32;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(32, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxnProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 txn_id = 1;
    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->txn_id());
    }
    
    // optional int32 txn_type = 10;
    if (has_txn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txn_type());
    }
    
    // optional int32 isolation_level = 11;
    if (has_isolation_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isolation_level());
    }
    
    // optional bool multipartition = 20;
    if (has_multipartition()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated int64 rset = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->rset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->rset(i));
    }
    total_size += 2 * this->rset_size() + data_size;
  }
  
  // repeated int64 wset = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->wset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->wset(i));
    }
    total_size += 2 * this->wset_size() + data_size;
  }
  
  // repeated int64 args = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->args(i));
    }
    total_size += 2 * this->args_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxnProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxnProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxnProto::MergeFrom(const TxnProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  rset_.MergeFrom(from.rset_);
  wset_.MergeFrom(from.wset_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_txn_id(from.txn_id());
    }
    if (from._has_bit(1)) {
      set_txn_type(from.txn_type());
    }
    if (from._has_bit(2)) {
      set_isolation_level(from.isolation_level());
    }
    if (from._has_bit(3)) {
      set_multipartition(from.multipartition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxnProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnProto::CopyFrom(const TxnProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TxnProto::Swap(TxnProto* other) {
  if (other != this) {
    std::swap(txn_id_, other->txn_id_);
    std::swap(txn_type_, other->txn_type_);
    std::swap(isolation_level_, other->isolation_level_);
    std::swap(multipartition_, other->multipartition_);
    rset_.Swap(&other->rset_);
    wset_.Swap(&other->wset_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxnProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxnProto_descriptor_;
  metadata.reflection = TxnProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
